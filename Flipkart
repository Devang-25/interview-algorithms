1. Connect Four Problem: Graph

Problem Statement: 
To implement the Connect Four game for two players. 

Description of the Game:
Given a 5X5 grid which stands vertically and is initially empty. Each player drops a ball of their colour to a column in their turn, which sinks to the bottom. The first player to get 4 consecutive (horizontal or vertical or diagonal )  slots wins. 

Interestingly, this board contains some blocked cells ( manufacturing defect), where it is not possible to the coin dropped in the column to reach down (by gravity) as it is blocked by the cell in between. Sample shown as follows. 

ans:

import java.io.*;
import java.util.*;

class Solution {
  /*
    Pseudocode:
    - create 5x5 board with blocked cells named "-1"      // completed
    - for each element of inputs[], do two things:
      - place the ball (named A/B) in the element-column  // completed
      - check if the player won the game                  // completed     
    // Note: Break the code with multiple test cases      // not done
  */
  
  public static void main(String[] args) {
    
    String type = "Human-Human";
    int[][] blockedCells = {{3, 3}, {4, 5}};
    String[][] inputs = {{"A","5"}, {"B","4"}, {"A","3"}, 
                         {"B","4"}, {"A","2"}, {"B","4"}, 
                         {"A","2"}, {"A","2"}, {"A","2"}};
    String[][] board = createBoard(blockedCells);
    String winner = play(type, board, inputs);
    printBoard(board);
    System.out.println("winner: " + winner);
    
  }
  
  // play game
  private static String play(String type, String[][] board, String[][] inputs){
    int length = inputs.length;
    int[] placedCell = new int[2];
    for(int i = 0; i < length; i++){
      System.out.println("input: " + inputs[i][0]);
      placedCell = placeBall(inputs[i], board);
      String player = getWinner(inputs[i], board, 1, placedCell);
      if(player.equals("A") || player.equals("B")) return player;
    }
    return "-1";
  }
  
  // returns the winner, if any, else -1
  private static String getWinner(String[] input, String[][] board, int count, int[] placedCell){ 
    boolean[][] vis = new boolean[5][5];
    if(isWon(placedCell[0], placedCell[1], board, count, input, vis)) return input[0];
    return "-1";
  }
  
  
  /* 
    recursive function:  (lessons from my mistakes)
      - are you modifying the correct variable be it for recursion or loop
      - are you modifying the variable correctly
      - are all the base conditions present:
          - array limits
          - if graph Q, is the cell to be traversed and is cell already visited
      - if graph Q, are you using a visited matrix so as not to recurse on the same element twice
      - what is the return type, when and where are you writing return statement
  */
  private static boolean isWon(int row, int column, 
                               String[][] board, int count, String[] input, boolean[][] vis){
    // base conditions: 
    if(count > 4) return true;
    if(row > 4 || column > 4) return false;
    if(!board[row][column].equals(input[0]) || vis[row][column] == true) return false;
    vis[row][column] = true;
    
    // recurse for all 8 adjacent cells
    boolean left = isWon(row, column - 1, board, count+1,input, vis);  // left
    boolean right = isWon(row, column + 1, board, count+1, input, vis);  // right
    boolean up = isWon(row - 1, column, board, count+1, input, vis);  // top
    boolean down = isWon(row + 1, column, board, count+1, input, vis);  // bottom
    boolean leftUp = isWon(row - 1, column - 1, board, count+1, input, vis);  // left up diagonal 
    boolean leftDown = isWon(row + 1, column - 1, board, count+1, input, vis);  // left down diagonal 
    boolean rightUp = isWon(row - 1, column + 1, board, count+1, input, vis);  // right up diagonal
    boolean rightDown = isWon(row + 1, column + 1, board, count+1, input, vis);  // right down diagonal
    
    return (left || right || up || down || leftUp || leftDown || rightUp || rightDown);   
  }
  
  // returns the cell where ball is placed
  private static int[] placeBall(String[] input, String[][] board){
    int[] cell = new int[2];
    int row = 0;
    int column = Integer.parseInt(input[1]) - 1;
    // traverse down the column until blocked cell, if any
    while (row < board.length && board[row][column].equals("0")){
      row++;
    }
    board[row-1][column] = input[0];
    cell[0] = row-1;
    cell[1] = column;
    return cell;
  }
  
  // returns a newly created board
  private static String[][] createBoard(int[][] blockedCells){
    String[][] board = new String[5][5];   
    // intitialize all cells with 0
    for(int i=0; i<5; i++){
      for(int j=0; j<5; j++){
        board[i][j] = "0";
      }
    }  
    // initialize blocked cells with -1
    for(int[] cell : blockedCells){
      board[cell[0]-1][cell[1]-1] = "-1";
    }
    return board;
  }
  
  // prints the board
  private static void printBoard(String[][] board){
    for(int i=0; i<5; i++){
      for(int j=0; j<5; j++){
        System.out.print(board[i][j] + " ");
      }
      System.out.println("");
    }
  }
  
}


2. FK Calendar

Given that you work in an organisation, you have to book a meeting room for the given guests.
The meeting must be in office hours ( 10 AM - 7PM). Meetings should have startTime, endTime (or duration from startTime), guest list and a room.

Functions to implement:
Create Room
Create Guest 
Find Room Availability (Room ,startTime, duration)
Find Guest Availability (Guest, startTime, duration)
Create Meeting (Room ,Guest list, startTime, duration)
(After the meeting is created, a corresponding time slot for the Room and all guests should become unavailable for any other meetings).

**Bonus Question:
Cancel meeting (Note: Status of the meeting should be marked as cancelled here and all corresponding booked slots of guests and room should be freed).

Sample Input:
createRoom (R1)
createRoom(R2)
createGuest (G1)
createGuest (G2)
createGuest (G3)
findRoomAvail(R1, 1575880200, 3600) 3600->seconds, 1575880200 -> 9 Dec, 2PM
Availability = true
findGuestAvail(G1, 1575880200, 3600)
Availability = true
findGuestAvail(G2, 1575880200, 3600)
Availability = true
createMeeting(R1, G1,G2,1575880200, 3600 )
M1 Created
 createMeeting(R2, G1,G2,1575880200, 3600 )
Meeting could not be created.

Expectations
Code should be demo-able (very important), either by using a main driver program or test cases.
Bonus questions should be attempted only after the main problem.
Code should handle edge cases properly and fail gracefully.
Create the sample data yourself to test your code. You can put it into a file, test case or main driver program itself.
Code should not be monolithic and it should be readable, extensible with proper naming conventions. Best practices followed.
Donâ€™t use any database, store all the data in memory.
Guidelines
Feel free to discuss the solution with an interviewer
Input can be read from file or can be hard coded/used. No need to waste time in thinking and coding around input formats and methods.
You are free to use the language of your choice.


Ans: 

import java.io.*;
import java.util.*;

class Solution {
  public static void main(String[] args) {
    
    Meeting meeting = new Meeting();
    int startTime = 11;
    int endTime = 13;
    Room room1 = meeting.createRoom("R1");
    Room room2 = meeting.createRoom("R2");
    Guest guest1 = meeting.createGuest("G1");
    Guest guest2 = meeting.createGuest("G2");
    List<Guest> guests = new ArrayList<>();
    guests.add(guest1);
    guests.add(guest2);
    
    
    System.out.println("1st Test case: ------");
    
    System.out.println("room1 available before: " + meeting.findRoomAvail(room1, startTime, endTime));
    System.out.println("guest1 available before: " + meeting.findGuestAvail(guest1, startTime, endTime));
    System.out.println("guest2 available before: " + meeting.findGuestAvail(guest2, startTime, endTime));
    Unavailability unavailability1 = meeting.createMeeting(room1, guests, startTime, endTime);
    System.out.println("room1 available after: " + meeting.findRoomAvail(room1, startTime, endTime));
    System.out.println("guest1 available after: " + meeting.findGuestAvail(guest1, startTime, endTime));
    System.out.println("guest2 available after: " + meeting.findGuestAvail(guest2, startTime, endTime));
    
    System.out.println("\n 2nd Test case: ------");
    
    
    System.out.println("room2 available before: " + meeting.findRoomAvail(room2, startTime, endTime));
    System.out.println("guest1 available before: " + meeting.findGuestAvail(guest1, startTime, endTime));
    System.out.println("guest2 available before: " + meeting.findGuestAvail(guest2, startTime, endTime));
    Unavailability unavailability2 = meeting.createMeeting(room2, guests, startTime, endTime);
    System.out.println("room2 available after: " + meeting.findRoomAvail(room2, startTime, endTime));
    System.out.println("guest1 available after: " + meeting.findGuestAvail(guest1, startTime, endTime));
    System.out.println("guest2 available after: " + meeting.findGuestAvail(guest2, startTime, endTime));
    
    System.out.println("\n 3nd Test case - cancel meeting: ------");
  
  System.out.println("room1 available before: " + meeting.findRoomAvail(room1, startTime, endTime));
    System.out.println("guest1 available before: " + meeting.findGuestAvail(guest1, startTime, endTime));
    System.out.println("guest2 available before: " + meeting.findGuestAvail(guest2, startTime, endTime));
     meeting.cancelMeeting(room1, guests, startTime, endTime, unavailability1);
    System.out.println("room1 available after: " + meeting.findRoomAvail(room1, startTime, endTime));
    System.out.println("guest1 available after: " + meeting.findGuestAvail(guest1, startTime, endTime));
    System.out.println("guest2 available after: " + meeting.findGuestAvail(guest2, startTime, endTime));
    
  }
}

  class Unavailability {
    int startTime;
    int endTime;
    public Unavailability(int startTime, int endTime){
      this.startTime = startTime;
      this.endTime = endTime;
    }
  }

  class Guest {
    String name;
    List<Unavailability> unavailabilities = new ArrayList<>();  
    public Guest(String name){
      this.name = name;
    }
  }

  class Room {
    String name;
    List<Unavailability> unavailabilities = new ArrayList<>();  
    public Room(String name){
      this.name = name;
    }
  }

  class Meeting {
  
    public static final int OFFICE_HOUR_BEGIN = 10; // railway time
    public static final int OFFICE_HOUR_END = 19; // railway time    
    
    public Room createRoom (String room){
      return new Room(room);
    }
    
    public Guest createGuest (String guest){
      return new Guest(guest);
    }
    
    public boolean findRoomAvail(Room room, int startTime, int endTime){
      for(Unavailability unavailability : room.unavailabilities){
        if(startTime >= unavailability.startTime && startTime <= unavailability.endTime) return false;
        if(endTime >= unavailability.startTime && endTime <= unavailability.endTime) return false;
      }
      return true;
    }
    
    public boolean findGuestAvail(Guest guest, int startTime, int endTime){
      for(Unavailability unavailability : guest.unavailabilities){
        if(startTime >= unavailability.startTime && startTime <= unavailability.endTime) return false;
        if(endTime >= unavailability.startTime && endTime <= unavailability.endTime) return false;
      }
      return true;
    }
    
    public Unavailability createMeeting(Room room, List<Guest> guests, int startTime, int endTime) {
      if(startTime < OFFICE_HOUR_BEGIN 
        || startTime > OFFICE_HOUR_END
        || endTime < OFFICE_HOUR_BEGIN 
        || endTime > OFFICE_HOUR_END){
        System.out.println("Cant create meeting: outside office hours");
        return null;
      }
      if(!findRoomAvail(room, startTime, endTime)) {
        System.out.println("Cant create meeting: room unavailable");
        return null;
      }
      for(Guest guest : guests){
        if(!findGuestAvail(guest, startTime, endTime)) {
          System.out.println("Cant create meeting: guest unavailable");
          return null;
        }
      }
      Unavailability unavailability = new Unavailability(startTime, endTime);
      room.unavailabilities.add(unavailability);
      for(Guest guest : guests){
        guest.unavailabilities.add(unavailability);
      }
      System.out.println("------ Meeting created ------");
    return unavailability; 
    }
  
  public void cancelMeeting(Room room, List<Guest> guests, int startTime, int endTime, Unavailability unavailability){
    room.unavailabilities.remove(unavailability);  // to do: check if room has this unavailability // use Map instead of List, else I'l have too loop all unavailabilites
    for(Guest guest : guests){  // to do: check if guest has this unavailability // use Map instead of List, else I'l have too loop all unavailabilites
      guest.unavailabilities.remove(unavailability);  // to do: Using LinkedList instead of ArrayList improves remove performance
    }
    System.out.println("------ Meeting cancelled ------");
  }
  }


